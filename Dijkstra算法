const int INF = 1000000000; // 无穷大
void Dijkstra(int start, vector<vector<pair<int, int>>> &graph, vector<int> &dist) {
    int n = graph.size(); // 图中节点数
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q;
    // 小根堆优化，每个元素是一个节点编号和从起点到该节点的距离pair，按照距离从小到大排序
    q.push(make_pair(0, start));
    dist[start] = 0;
    while (!q.empty()) {
        int u = q.top().second; // 当前候选集中距离起点最近的节点
        q.pop();
        for (auto &p : graph[u]) {
            int v = p.first;
            int weight = p.second;
            if (dist[v] > dist[u] + weight) { // 松弛操作
                dist[v] = dist[u] + weight;
                q.push(make_pair(dist[v], v)); // 更新候选集
            }
        }
    }
}
